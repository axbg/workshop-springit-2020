name: CI/CD

on: ['push', 'pull_request']

jobs:
  Build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Set up node
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11.0.x'    

    - name: Cache npm libraries
      uses: actions/cache@v2
      with:
        path: '~/.npm'
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: Cache Maven libraries
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
    
    - name: Install front dependencies
      working-directory: ./front
      run: npm install

    - name: Run front-end lint
      working-directory: ./front
      run: npm run lint

    - name: Run front-end test
      working-directory: ./front
      run: npm run test:unit

    - name: Build front-end
      working-directory: ./front
      run: npm run build

    - name: Copy front-end build
      working-directory: ./back
      run: mkdir src/main/resources/static && cp -R ../front/dist/* src/main/resources/static

    - name: Build back-end
      working-directory: ./back
      run:  mvn package

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ secrets.ARTIFACT_TAG }}
        path: back/target/spring-0.0.1-SNAPSHOT.jar

  Publish:
    runs-on: ubuntu-latest
    needs: Build
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Recreate structure
      run: mkdir back/target

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ secrets.ARTIFACT_TAG }}
        path: back/target

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASS }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_IMAGE_TAG }}

  Deploy:
    runs-on: ubuntu-latest
    needs: Publish
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Deploy Image
        uses: appleboy/ssh-action@master
        env:
          CONTAINER_NAME: ${{ secrets.DOCKER_CONTAINER_NAME }}
          CONTAINER_NETWORK: ${{ secrets.DOCKER_CONTAINER_NETWORK }}
          DOCKER_IMAGE_TAG: ${{ secrets.DOCKER_IMAGE_TAG }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
          DB_HOST: ${{ secrets.DB_TARGET_HOST }}
          DB_NAME: ${{ secrets.NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: CONTAINER_NAME,CONTAINER_NETWORK,DOCKER_IMAGE_TAG,DOCKER_USERNAME,DOCKER_PASS,DB_HOST,DB_NAME,DB_USERNAME,DB_PASSWORD
          script: |
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASS
            docker pull $DOCKER_IMAGE_TAG
            docker stop $CONTAINER_NAME
            docker rm $CONTAINER_NAME
            docker container run -d -e DB_HOST=$DB_HOST -e DB_NAME=$DB_NAME -e DB_USERNAME=$DB_USERNAME -e DB_PASSWORD=$DB_PASSWORD --network=$CONTAINER_NETWORK -p 8080:8080 --name $CONTAINER_NAME $DOCKER_IMAGE_TAG